from flask import Flask, render_template,render_template_string, request, jsonify, redirect, url_for, session, flash from flask_sqlalchemy import SQLAlchemy import sys import io import os import hashlib app = Flask(__name__) app.config['SECRET_KEY'] = "7j4D5htxLHUiffsjLXB1z9GaZ5" app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db' app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False db = SQLAlchemy(app) class User(db.Model): id = db.Column(db.Integer, primary_key=True) username = db.Column(db.String(80), unique=True, nullable=False) password = db.Column(db.String(80), nullable=False) codes = db.relationship('Code', backref='user', lazy=True) class Code(db.Model): id = db.Column(db.Integer, primary_key=True) user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False) code = db.Column(db.Text, nullable=False) name = db.Column(db.String(100), nullable=False) def __init__(self, user_id, code, name): self.user_id = user_id self.code = code self.name = name @app.route('/') def index(): code_id = request.args.get('code_id') return render_template('index.html', code_id=code_id) @app.route('/register', methods=['GET', 'POST']) def register(): if request.method == 'POST': username = request.form['username'] password = hashlib.md5(request.form['password'].encode()).hexdigest() existing_user = User.query.filter_by(username=username).first() if existing_user: flash('User already exists. Please choose a different username.') else: new_user = User(username=username, password=password) db.session.add(new_user) db.session.commit() flash('Registration successful! You can now log in.') return redirect(url_for('login')) return render_template('register.html') @app.route('/login', methods=['GET', 'POST']) def login(): if request.method == 'POST': username = request.form['username'] password = hashlib.md5(request.form['password'].encode()).hexdigest() user = User.query.filter_by(username=username, password=password).first() if user: session['user_id'] = user.id flash('Login successful!') return redirect(url_for('index')) else: flash('Invalid credentials. Please try again.') return render_template('login.html') @app.route('/logout') def logout(): session.pop('user_id', None) flash('You have been logged out.') return redirect(url_for('index')) @app.route('/run_code', methods=['POST']) def run_code(): code = request.form['code'] old_stdout = sys.stdout redirected_output = sys.stdout = io.StringIO() try: for keyword in ['eval', 'exec', 'import', 'open', 'os', 'read', 'system', 'write', 'subprocess', '__import__', '__builtins__']: if keyword in code.lower(): return jsonify({'output': 'Use of restricted keywords is not allowed.'}) exec(code) output = redirected_output.getvalue() except Exception as e: output = str(e) finally: sys.stdout = old_stdout return jsonify({'output': output}) @app.route('/load_code/<int:code_id>') def load_code(code_id): if 'user_id' not in session: flash('You must be logged in to view your codes.') return redirect(url_for('login')) code = Code.query.get_or_404(code_id) if code.user_id != session['user_id']: flash('You do not have permission to view this code.') return redirect(url_for('codes')) return jsonify({'code': code.code}) @app.route('/save_code', methods=['POST']) def save_code(): if 'user_id' not in session: return jsonify({'message': 'You must be logged in to save code.'}), 401 user_id = session['user_id'] code = request.form.get('code') name = request.form.get('name') if not code or not name: return jsonify({'message': 'Code and name are required.'}), 400 new_code = Code(user_id=user_id, code=code, name=name) db.session.add(new_code) db.session.commit() return jsonify({'message': 'Code saved successfully!'}) @app.route('/codes', methods=['GET', 'POST']) def codes(): if 'user_id' not in session: flash('You must be logged in to view your codes.') return redirect(url_for('login')) user_id = session['user_id'] codes = Code.query.filter_by(user_id=user_id).all() if request.method == 'POST': code_id = request.form.get('code_id') code = Code.query.get(code_id) if code and code.user_id == user_id: db.session.delete(code) db.session.commit() flash('Code deleted successfully!') else: flash('Code not found or you do not have permission to delete it.') return redirect(url_for('codes')) return render_template('codes.html',codes=codes) @app.route('/about') def about(): return render_template('about.html') if __name__ == '__main__': if not os.path.exists('database.db'): with app.app_context(): db.create_all() app.run(host='0.0.0.0', port=5000) 




{'__name__': 'app', '__doc__': None, '__package__': '', '__loader__': <_frozen_importlib_external.SourceFileLoader object at 0x7fe4132e2490>, '__spec__': ModuleSpec(name='app', loader=<_frozen_importlib_external.SourceFileLoader object at 0x7fe4132e2490>, origin='/home/app-production/app/app.py'), '__file__': '/home/app-production/app/app.py', '__cached__': '/home/app-production/app/__pycache__/app.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2021 Python Software Foundation. All Rights Reserved. Copyright (c) 2000 BeOpen.com. All Rights Reserved. Copyright (c) 1995-2001 Corporation for National Research Initiatives. All Rights Reserved. Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam. All Rights Reserved., 'credits': Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands for supporting Python development. See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, 'Flask': <class 'flask.app.Flask'>, 'render_template': <function render_template at 0x7fe412c9eee0>, 'render_template_string': <function render_template_string at 0x7fe412c9ef70>, 'request': <Request 'http://10.10.11.62:5000/run_code' [POST]>, 'jsonify': <function jsonify at 0x7fe412f48c10>, 'redirect': <function redirect at 0x7fe412db23a0>, 'url_for': <function url_for at 0x7fe412db2310>, 'session': <SecureCookieSession {'_flashes': [('message', 'Registration successful! You can now log in.'), ('message', 'Login successful!'), ('message', 'You do not have permission to view this code.'), ('message', 'You do not have permission to view this code.'), ('message', 'You do not have permission to view this code.')], 'user_id': 3}>, 'flash': <function flash at 0x7fe412db2550>, 'SQLAlchemy': <class 'flask_sqlalchemy.extension.SQLAlchemy'>, 'sys': <module 'sys' (built-in)>, 'io': <module 'io' from '/usr/lib/python3.8/io.py'>, 'os': <module 'os' from '/usr/lib/python3.8/os.py'>, 'hashlib': <module 'hashlib' from '/usr/lib/python3.8/hashlib.py'>, 'app': <Flask 'app'>, 'db': <SQLAlchemy sqlite:////home/app-production/app/instance/database.db>, 'User': <class 'app.User'>, 'Code': <class 'app.Code'>, 'index': <function index at 0x7fe411ceb8b0>, 'register': <function register at 0x7fe411cebb80>, 'login': <function login at 0x7fe411cebc10>, 'logout': <function logout at 0x7fe411cebca0>, 'run_code': <function run_code at 0x7fe411cebe50>, 'load_code': <function load_code at 0x7fe411b67040>, 'save_code': <function save_code at 0x7fe411b671f0>, 'codes': <function codes at 0x7fe411b673a0>, 'about': <function about at 0x7fe411b67550>} [<User 1>, <User 2>] 